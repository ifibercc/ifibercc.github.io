<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>总总</title>
  <subtitle>Keep surprising people.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.foom.site/"/>
  <updated>2017-06-27T08:17:23.000Z</updated>
  <id>www.foom.site/</id>
  
  <author>
    <name>景初</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阿里云搭建 nginx</title>
    <link href="www.foom.site/2017/06/27/%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BA-nginx/"/>
    <id>www.foom.site/2017/06/27/阿里云搭建-nginx/</id>
    <published>2017-06-27T07:36:55.000Z</published>
    <updated>2017-06-27T08:17:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>为了开发微信小程序, 要买个 CA 证书, 看到阿里云有免费的, 就给申请, 就在此时又看到了阿里云的 ECS 有大优惠, 1-1-1的配置一年就要300+, 之前300+只能买三个月, 就顺道给买了, 简直是捆绑消费啊, 然而身为 FE 的我在配置阿里云服务器以及做 PE 相关的东西时显得捉襟见肘, 遇到了很多问题, 所以特此记录下来.</p>
<h2 id="2-ssh"><a href="#2-ssh" class="headerlink" title="2. ssh"></a>2. ssh</h2><p>买了服务器当然要先登录啦, 通过我们的 SSH 客户端来<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">root</span>@<span class="keyword">123</span>.<span class="keyword">123</span>.<span class="keyword">123</span>.<span class="keyword">123</span> // 你的服务器公网地址</div></pre></td></tr></table></figure></p>
<p>接下来会询问你关于 ssh key 的问题, yes 就好, 另外一种情况, 你在本地登录过此台服务器结果又重装了, 再登录时这个 ssh 密钥会发生变化, 需要去 <code>vi ~/.ssh/known_hosts</code>中你的服务器那行给删掉, dd 即可.</p>
<h2 id="3-yum"><a href="#3-yum" class="headerlink" title="3. yum"></a>3. yum</h2><blockquote>
<p>yum（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。基於RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。yum提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p>
</blockquote>
<h2 id="4-修改-yum-源"><a href="#4-修改-yum-源" class="headerlink" title="4. 修改 yum 源"></a>4. 修改 yum 源</h2><p>其实 yum 就是类似于 node 中 npm 的包或者依赖管理工具, 其实应该反过来类比更对, 毕竟npm 太年轻, 要知道我们用 npm 时会将源切换到国内的, 这里也是同样的道理. 国内有很多 yum 源, 我也不知道哪家好, 基于 npm 的惯例, 还是用<a href="http://mirrors.aliyun.com/help/centos" target="_blank" rel="external">阿里云</a>的吧.<br>我这里是 CentOS 7 版本</p>
<h3 id="4-1-备份"><a href="#4-1-备份" class="headerlink" title="4.1 备份"></a>4.1 备份</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv /etc/yum<span class="selector-class">.repos</span><span class="selector-class">.d</span>/CentOS-Base<span class="selector-class">.repo</span> /etc/yum<span class="selector-class">.repos</span><span class="selector-class">.d</span>/CentOS-Base<span class="selector-class">.repo</span><span class="selector-class">.backup</span></div></pre></td></tr></table></figure>
<h3 id="4-2-下载新的CentOS-Base-repo-到-etc-yum-repos-d"><a href="#4-2-下载新的CentOS-Base-repo-到-etc-yum-repos-d" class="headerlink" title="4.2 下载新的CentOS-Base.repo 到/etc/yum.repos.d/"></a>4.2 下载新的CentOS-Base.repo 到/etc/yum.repos.d/</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget -O /etc/yum<span class="selector-class">.repos</span><span class="selector-class">.d</span>/CentOS-Base<span class="selector-class">.repo</span> http:<span class="comment">//mirrors.aliyun.com/repo/Centos-7.repo</span></div><div class="line">或者</div><div class="line">curl -o /etc/yum<span class="selector-class">.repos</span><span class="selector-class">.d</span>/CentOS-Base<span class="selector-class">.repo</span> http:<span class="comment">//mirrors.aliyun.com/repo/Centos-7.repo</span></div></pre></td></tr></table></figure>
<h3 id="4-3-生成缓存"><a href="#4-3-生成缓存" class="headerlink" title="4.3 生成缓存"></a>4.3 生成缓存</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">yum makecache</span></div></pre></td></tr></table></figure>
<h2 id="5-更新-yum-依赖"><a href="#5-更新-yum-依赖" class="headerlink" title="5. 更新 yum 依赖"></a>5. 更新 yum 依赖</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">yum -y update</span></div></pre></td></tr></table></figure>
<h2 id="6-安装-nginx"><a href="#6-安装-nginx" class="headerlink" title="6. 安装 nginx"></a>6. 安装 nginx</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum <span class="keyword">install</span> nginx</div></pre></td></tr></table></figure>
<h2 id="7-启动-nginx"><a href="#7-启动-nginx" class="headerlink" title="7. 启动 nginx"></a>7. 启动 nginx</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service nginx <span class="literal">start</span></div></pre></td></tr></table></figure>
<h2 id="8-测试是否成功"><a href="#8-测试是否成功" class="headerlink" title="8. 测试是否成功"></a>8. 测试是否成功</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">http:</span><span class="comment">//127.0.0.1</span></div></pre></td></tr></table></figure>
<p>如果有成功的返回则证明成功启动了 nginx 服务器  </p>
<h2 id="9-安全策略"><a href="#9-安全策略" class="headerlink" title="9. 安全策略"></a>9. 安全策略</h2><p>但是, 这时从公网访问此服务器, 或者直接在本地 <code>curl http://47.xx.xx.xx</code> 则会发现链接超时, 这个地方坑了我很多天, 本来以为是防火墙的原因, 一直去查 iptables 等的配置, 实际上新的机器 iptables 并不会启用, 没有任何 ACL 来阻止我们的请求, 后来排查发现, 是阿里云有一个外部的总防火墙, 安全策略, 白名单里没有将80端口开放出来, 导致 nginx 的请求被阻止, 在这里进行配置<br><img src="/uploads/img/008 - aliyun-safe.png" alt="安全组"><br>点击’配置规则’, ‘快速创建规则’, 将80端口的规则添加进去就 ok 了, 这个时候再访问, 就可以看到成功的页面了<br><img src="/uploads/img/009 - aliyun-nginx-success.png" alt="success"></p>
<p>DONE! 至此搭建完毕~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h2&gt;&lt;p&gt;为了开发微信小程序, 要买个 CA 证书, 看到阿里云有免费的, 就给申请, 就在此时又看到了阿里云的 ECS 有大优惠
    
    </summary>
    
    
      <category term="tech" scheme="www.foom.site/tags/tech/"/>
    
      <category term="PE" scheme="www.foom.site/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>vue实现表格合并</title>
    <link href="www.foom.site/2016/11/28/vue%E5%AE%9E%E7%8E%B0%E8%A1%A8%E6%A0%BC%E5%90%88%E5%B9%B6/"/>
    <id>www.foom.site/2016/11/28/vue实现表格合并/</id>
    <published>2016-11-28T10:00:58.000Z</published>
    <updated>2017-04-24T09:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-场景"><a href="#1-场景" class="headerlink" title="1. 场景"></a>1. 场景</h2><p>这两天一个项目，属于子需求吧，就是要做一个页面放个简单的banner下面是张大表格用来显示数据项，纯粹为了view层操作方便，就用了vue做渲染。<br>然而，对方最近又提出了一个恶心需求，需要<strong>相邻的相同值的行数据项进行单元格合并</strong>，这就醉了。</p>
<p>由于使用的是vue，想到MVVM是要用数据驱动的思想，所以考虑在Model做手脚，而不是渲染出数据来后做DOM操作，当然基本的CSS还是要有的。因此这个方法对所有<br>数据驱动的框架都有效，比如说Angular和React。最后的实现效果是这样的：<br><img src="/uploads/img/007-combinecell.jpg" alt="both"></p>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a>2. 思路</h2><p>原本的正常表格的代码长这样：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"3%"</span>&gt;</span><span class="template-variable">&#123;&#123; $index + 1 &#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"15%"</span>&gt;</span><span class="template-variable">&#123;&#123;item.bsO_Name&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"8%"</span> <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;'overtime': overtime(item.GathDt)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.GathDt | time&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>&gt;</span><span class="template-variable">&#123;&#123;item.F1&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>&gt;</span><span class="template-variable">&#123;&#123;item.F2&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>&gt;</span><span class="template-variable">&#123;&#123;item.F4&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>&gt;</span><span class="template-variable">&#123;&#123;item.F3&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>&gt;</span><span class="template-variable">&#123;&#123;item.F5&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>&gt;</span><span class="template-variable">&#123;&#123;item.F6&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>&gt;</span><span class="template-variable">&#123;&#123;item.F7&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>&gt;</span><span class="template-variable">&#123;&#123;item.F8&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>&gt;</span><span class="template-variable">&#123;&#123;item.F9&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>&gt;</span><span class="template-variable">&#123;&#123;item.F10&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>先拿正常的表格来做测试，原生的<code>&lt;td&gt;</code>标签就有<code>rowspan</code>属性支持单元格行合并，属性值指的是向下合并多少行，其实就相当于在本行中向下又添加了几个单元格。<br>因为，如果接下来的一行还会渲染的话就会被挤下去，因此，下面被合并的单元格要隐藏掉，通过<code>display: none;</code>css控制即可。</p>
<p>因此，每个<code>&lt;td&gt;</code>标签需要带有两个属性值，<code>rowspan</code>和<code>display</code>来控制每一个单元格的合并行数和是否显示。代码变成这样了<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"3%"</span>&gt;</span><span class="template-variable">&#123;&#123; $index + 1 &#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"10%"</span> <span class="attr">:rowspan</span>=<span class="string">"item.bsO_Namespan"</span> <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;hidden: item.bsO_Namedis&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.bsO_Name&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"8%"</span>  <span class="attr">:rowspan</span>=<span class="string">"item.GathDtspan"</span>   <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;hidden: item.GathDtdis&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">:class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;overtime: overtime(item.GathDt)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.GathDt | time&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>  <span class="attr">:rowspan</span>=<span class="string">"item.F1span"</span>       <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;hidden: item.F1dis&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.F1&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>  <span class="attr">:rowspan</span>=<span class="string">"item.F2span"</span>       <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;hidden: item.F2dis&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.F2&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>  <span class="attr">:rowspan</span>=<span class="string">"item.F3span"</span>       <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;hidden: item.F3dis&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.F3&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>  <span class="attr">:rowspan</span>=<span class="string">"item.F4span"</span>       <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;hidden: item.F4dis&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.F4&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>  <span class="attr">:rowspan</span>=<span class="string">"item.F5span"</span>       <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;hidden: item.F5dis&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.F5&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"10%"</span> <span class="attr">:rowspan</span>=<span class="string">"item.F6span"</span>       <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;hidden: item.F6dis&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.F6&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"8%"</span>  <span class="attr">:rowspan</span>=<span class="string">"item.F7span"</span>       <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;hidden: item.F7dis&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">:class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;overtime: overtime(item.F7)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.F7 | time&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>  <span class="attr">:rowspan</span>=<span class="string">"item.F8span"</span>       <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;hidden: item.F8dis&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.F8&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>  <span class="attr">:rowspan</span>=<span class="string">"item.F9span"</span>       <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;hidden: item.F9dis&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.F9&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>  <span class="attr">:rowspan</span>=<span class="string">"item.F10span"</span>      <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;hidden: item.F10dis&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.F10&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"5%"</span>  <span class="attr">:rowspan</span>=<span class="string">"item.F11span"</span>      <span class="attr">:class</span>=<span class="string">"</span></span><span class="template-variable">&#123;hidden: item.F11dis&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.F11&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中，这两个属性有一些特征：</p>
<ul>
<li>要显示的单元格rowspan为&gt;1的值，记录接下来的行数</li>
<li>要显示的单元格display为true</li>
<li>接下来不显示的单元格rowspan为1且display为false</li>
<li>只有一行数据的单元格rowspan为1且display为true</li>
</ul>
<p>实际上就是设计一个算法，对于输入的表格数组，每个数据项添加两个属性，rowspan和display，并且计算出<strong>rowspan的值为<br>本列中以下相同值的行数</strong>，以及<strong>依据rowspan的值计算display的值是否显示</strong>，最后将此改变后的数组输出。</p>
<h2 id="3-show-me-code"><a href="#3-show-me-code" class="headerlink" title="3. show me code"></a>3. show me code</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">combineCell</span><span class="params">(list)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (field in <span class="keyword">list</span>[<span class="number">0</span>]) &#123;</div><div class="line">        <span class="keyword">var</span> k = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (k &lt; <span class="keyword">list</span>.length) &#123;</div><div class="line">            <span class="keyword">list</span>[k][field + <span class="string">'span'</span>] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">list</span>[k][field + <span class="string">'dis'</span>] = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = k + <span class="number">1</span>; i &lt;= <span class="keyword">list</span>.length - <span class="number">1</span>; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">list</span>[k][field] == <span class="keyword">list</span>[i][field] &amp;&amp; <span class="keyword">list</span>[k][field] != <span class="string">''</span>) &#123;</div><div class="line">                    <span class="keyword">list</span>[k][field + <span class="string">'span'</span>]++;</div><div class="line">                    <span class="keyword">list</span>[k][field + <span class="string">'dis'</span>] = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">list</span>[i][field + <span class="string">'span'</span>] = <span class="number">1</span>;</div><div class="line">                    <span class="keyword">list</span>[i][field + <span class="string">'dis'</span>] = <span class="keyword">true</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            k = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">list</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>代码实际上很短很简单，主要借助的是kmp的思想，定义一个指针k，开始指向第一个值，然后向下比较，以此对rowspan和display设置，<br>若遇到不相同的值则判断为跳出，进行下一个循环，通知指针k加上这个过程中运算的行数，进行跳转，然后比较下一个单元格的值，和kmp的指针跳转判断相同字符串一样的原理。</p>
<p>通过<code>combineCell()</code>这个函数就可以将网络请求回来的数据进行过滤，附加上相应的值后再对vue监视的数组进行赋值操作就可以了。<br>实际上此方法不仅适用于vue，数据驱动的框架都可以，包括Angular和React，要想实现表格合并，对请求回来的值过滤一下就OK。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-场景&quot;&gt;&lt;a href=&quot;#1-场景&quot; class=&quot;headerlink&quot; title=&quot;1. 场景&quot;&gt;&lt;/a&gt;1. 场景&lt;/h2&gt;&lt;p&gt;这两天一个项目，属于子需求吧，就是要做一个页面放个简单的banner下面是张大表格用来显示数据项，纯粹为了view层操作
    
    </summary>
    
    
      <category term="JavaScript" scheme="www.foom.site/tags/JavaScript/"/>
    
      <category term="vue" scheme="www.foom.site/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>浅谈script标签的defer和async</title>
    <link href="www.foom.site/2016/08/31/%E6%B5%85%E8%B0%88script%E6%A0%87%E7%AD%BE%E7%9A%84defer%E5%92%8Casync/"/>
    <id>www.foom.site/2016/08/31/浅谈script标签的defer和async/</id>
    <published>2016-08-30T16:29:45.000Z</published>
    <updated>2017-04-24T09:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么鬼"><a href="#1-什么鬼" class="headerlink" title="1. 什么鬼"></a>1. 什么鬼</h2><p>今天在做一个小需的时候，忽然看到前辈一句吊炸天的代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"#link("</span>xxxx/xx/home/home.js<span class="string">")"</span> type=<span class="string">"text/javascript"</span> <span class="keyword">async</span> defer&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>卧槽，竟然同时有<code>async</code>和<code>defer</code>属性，心想着肯定是前辈老司机的什么黑科技，两个一块儿肯定会发生什么神奇化学反应，于是赶紧怀着一颗崇敬的心去翻书翻文档，先复习一下各自的定义。</p>
<h2 id="2-调查一番"><a href="#2-调查一番" class="headerlink" title="2. 调查一番"></a>2. 调查一番</h2><p>先看看<code>async</code>和<code>defer</code>各自的定义吧，翻开红宝书望远镜，是这么介绍的</p>
<h3 id="2-1-defer"><a href="#2-1-defer" class="headerlink" title="2.1 defer"></a>2.1 defer</h3><blockquote>
<p>这个属性的用途是表明脚本在执行时不会影响页面的构造。也就是说，脚本会被延迟到整个页面都解析完毕后再运行。因此，在<code>&lt;script&gt;</code>元素中设置<code>defer</code>属性，相当于告诉浏览器立即下载，但延迟执行。</p>
<p>HTML5规范要求脚本按照它们出现的先后顺序执行，因此第一个延迟脚本会先于第二个延迟脚本执行，而这两个脚本会先于<code>DOMContentLoaded</code>事件执行。<strong>在现实当中</strong>，延迟脚本并不一定会按照顺序执行，也不一定会在<code>DOMContentLoad</code>时间触发前执行，因此最好只包含一个延迟脚本。</p>
</blockquote>
<h3 id="2-2-async"><a href="#2-2-async" class="headerlink" title="2.2 async"></a>2.2 async</h3><blockquote>
<p>这个属性与<code>defer</code>类似，都用于改变处理脚本的行为。同样与<code>defer</code>类似，<code>async</code>只适用于外部脚本文件，并告诉浏览器立即下载文件。但与<code>defer</code>不同的是，标记为<code>async</code>的脚本并不保证按照它们的先后顺序执行。</p>
<p>第二个脚本文件可能会在第一个脚本文件之前执行。因此确保两者之间互不依赖非常重要。指定<code>async</code>属性的目的是不让页面等待两个脚本下载和执行，从而异步加载页面其他内容。</p>
</blockquote>
<p>概括来讲，就是这两个属性都会使script标签异步加载，然而执行的时机是不一样的。引用<a href="https://segmentfault.com/q/1010000000640869" target="_blank" rel="external">segmentfault</a>上的一个回答中的一张图<img src="/uploads/img/001-line.jpg" alt="segmentfault">蓝色线代表网络读取，红色线代表执行时间，这俩都是针对脚本的；绿色线代表 HTML 解析。</p>
<p>也就是说<code>async</code>是乱序的，而<code>defer</code>是顺序执行，这也就决定了<code>async</code>比较适用于百度分析或者谷歌分析这类不依赖其他脚本的库。从图中可以看到一个普通的<code>&lt;script&gt;</code>标签的加载和解析都是同步的，会阻塞DOM的渲染，这也就是我们经常会把<code>&lt;script&gt;</code>写在<code>&lt;body&gt;</code>底部的原因之一，为了防止加载资源而导致的长时间的白屏，另一个原因是js可能会进行DOM操作，所以要在DOM全部渲染完后再执行。</p>
<h3 id="2-3-really？"><a href="#2-3-really？" class="headerlink" title="2.3 really？"></a>2.3 really？</h3><p><strong>然而</strong>，这张图（几乎是百度搜到的唯一答案）是不严谨的，这只是规范的情况，大多数浏览器在实现的时候会作出优化。</p>
<p>来看看chrome是怎么做的</p>
<blockquote>
<p>《WebKit技术内幕》：</p>
<ol>
<li>当用户输入网页URL的时候，WebKit调用其资源加载器加载该URL对应的网页。</li>
<li>加载器依赖网络模块建立连接，发送请求并接受答复。</li>
<li>WebKit接收到各种网页或者资源的数据，其中某些资源可能是同步或异步获取的。</li>
<li>网页被交给HTML解释器转变成一系列的词语（Token）。</li>
<li>解释器根据词语构建节点（Node），形成DOM树。</li>
<li>如果节点是JavaScript代码的话，调用JavaScript引擎解释并执行。</li>
<li>JavaScript代码可能会修改DOM树的结构。</li>
<li>如果节点需要依赖其他资源，例如图片、CSS、视频等，调用资源加载器来加载他们，但是他们是异步的，不会阻碍当前DOM树的继续创建；如果是JavaScript资源URL（没有标记异步方式），则需要停止当前DOM树的创建，直到JavaScript的资源加载并被JavaScript引擎执行后才继续DOM树的创建。</li>
</ol>
</blockquote>
<p><strong>所以</strong>，通俗来讲，chrome浏览器首先会请求HTML文档，然后对其中的各种资源调用相应的资源加载器进行异步网络请求，同时进行DOM渲染，直到遇到<code>&lt;script&gt;</code>标签的时候，主进程才会停止渲染等待此资源加载完毕然后调用V8引擎对js解析，继而继续进行DOM解析。我的理解如果加了<code>async</code>属性就相当于单独开了一个进程去独立加载和执行，而<code>defer</code>是和将<code>&lt;script&gt;</code>放到<code>&lt;body&gt;</code>底部一样的效果。</p>
<h2 id="3-实验一发"><a href="#3-实验一发" class="headerlink" title="3. 实验一发"></a>3. 实验一发</h2><h3 id="3-1-demo"><a href="#3-1-demo" class="headerlink" title="3.1 demo"></a>3.1 demo</h3><p>为了验证上面的结论我们来测试一下</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://libs.baidu.com/bootstrap/3.0.3/css/bootstrap.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://cdn.staticfile.org/foundation/6.0.1/css/foundation.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/backbone/0.9.2/backbone.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/2.0.0/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    ul&gt;li<span class="template-variable">&#123;这是第$个节点&#125;</span><span class="xml">*1000</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>一个简单的demo，从各个CDN上引用了2个CSS3个JS，在body里面创建了1000个li。通过调整外部引用资源的位置和加入相关的属性利用chrome的Timeline进行验证。</p>
<h3 id="3-2-放置在-lt-head-gt-内"><a href="#3-2-放置在-lt-head-gt-内" class="headerlink" title="3.2 放置在&lt;head&gt;内"></a>3.2 放置在<code>&lt;head&gt;</code>内</h3><p><img src="/uploads/img/002-head.jpg" alt="head"><br>异步加载资源，但会阻塞<code>&lt;body&gt;</code>的渲染会出现白屏，按照顺序立即执行脚本</p>
<h3 id="3-3-放置在-lt-body-gt-底部"><a href="#3-3-放置在-lt-body-gt-底部" class="headerlink" title="3.3 放置在&lt;body&gt;底部"></a>3.3 放置在<code>&lt;body&gt;</code>底部</h3><p><img src="/uploads/img/003-body.jpg" alt="body"><br>异步加载资源，等<code>&lt;body&gt;</code>中的内容渲染完毕后且加载完按顺序执行JS</p>
<h3 id="3-3-放置在-lt-head-gt-头部并使用async"><a href="#3-3-放置在-lt-head-gt-头部并使用async" class="headerlink" title="3.3 放置在&lt;head&gt;头部并使用async"></a>3.3 放置在<code>&lt;head&gt;</code>头部并使用<code>async</code></h3><p><img src="/uploads/img/004-async.jpg" alt="async"><br>异步加载资源，且加载完JS资源立即执行，并不会按顺序，谁快谁先上</p>
<h3 id="3-4-放置在-lt-head-gt-头部并使用defer"><a href="#3-4-放置在-lt-head-gt-头部并使用defer" class="headerlink" title="3.4 放置在&lt;head&gt;头部并使用defer"></a>3.4 放置在<code>&lt;head&gt;</code>头部并使用<code>defer</code></h3><p><img src="/uploads/img/005-defer.jpg" alt="defer"><br>异步加载资源，在DOM渲染后之后再按顺序执行JS</p>
<h3 id="3-5-放置在-lt-head-gt-头部并同时使用async和defer"><a href="#3-5-放置在-lt-head-gt-头部并同时使用async和defer" class="headerlink" title="3.5 放置在&lt;head&gt;头部并同时使用async和defer"></a>3.5 放置在<code>&lt;head&gt;</code>头部并同时使用<code>async</code>和<code>defer</code></h3><p><img src="/uploads/img/006-both.jpg" alt="both"><br>表现和<code>async</code>一致，开了个脑洞，把这两个属性交换一下位置，看会不会有覆盖效果，结果发现是一致的 = =、</p>
<p><strong>综上</strong>，在webkit引擎下，建议的方式仍然是把<code>&lt;script&gt;</code>写在<code>&lt;body&gt;</code>底部，如果需要使用百度谷歌分析或者不蒜子等独立库时可以使用<code>async</code>属性，若你的<code>&lt;script&gt;</code>标签必须写在<code>&lt;head&gt;</code>头部内可以使用<code>defer</code>属性</p>
<h2 id="4-兼容性"><a href="#4-兼容性" class="headerlink" title="4. 兼容性"></a>4. 兼容性</h2><p>那么，揣摩一下前辈的心理，同时写上的原因是什么呢，兼容性?</p>
<p>上caniuse，<a href="http://caniuse.com/#search=async" target="_blank" rel="external">async</a>在IE&lt;=9时不支持，其他浏览器OK；<a href="http://caniuse.com/#search=defer" target="_blank" rel="external">defer</a>在IE&lt;=9时支持但会有bug，其他浏览器OK；现象在这个<a href="https://github.com/h5bp/lazyweb-requests/issues/42" target="_blank" rel="external">issue</a>里有描述，这也就是“望远镜”里建议只有一个<code>defer</code>的原因。所以两个属性都指定是为了在<code>async</code>不支持的时候启用<code>defer</code>，但<code>defer</code>在某些情况下还是有bug。</p>
<blockquote>
<p>The defer attribute may be specified even if the async attribute is specified, to cause legacy Web browsers that only support defer (and not async) to fall back to the defer behavior instead of the synchronous blocking behavior that is the default.</p>
</blockquote>
<h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h2><p>其实这么讲来，最稳妥的办法还是把<code>&lt;script&gt;</code>写在<code>&lt;body&gt;</code>底部，没有兼容性问题，没有白屏问题，没有执行顺序问题，高枕无忧，不要搞什么<code>defer</code>和<code>async</code>的花啦~</p>
<p>目前只研究了chrome的webkit的渲染机制，Firefox和IE的有待继续研究，图片和CSS以及其他外部资源的渲染有待研究。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://book.douban.com/subject/10546125/" target="_blank" rel="external">JavaScript高级程序设计</a></li>
<li><a href="https://book.douban.com/subject/25910556/" target="_blank" rel="external">WebKit技术内幕</a></li>
<li><a href="https://segmentfault.com/q/1010000000640869" target="_blank" rel="external">defer和async的区别</a></li>
<li><a href="https://www.w3.org/TR/html5/scripting-1.html#attr-script-async" target="_blank" rel="external">www.w3.org</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-什么鬼&quot;&gt;&lt;a href=&quot;#1-什么鬼&quot; class=&quot;headerlink&quot; title=&quot;1. 什么鬼&quot;&gt;&lt;/a&gt;1. 什么鬼&lt;/h2&gt;&lt;p&gt;今天在做一个小需的时候，忽然看到前辈一句吊炸天的代码&lt;/p&gt;
&lt;figure class=&quot;highlight 
    
    </summary>
    
    
      <category term="tech" scheme="www.foom.site/tags/tech/"/>
    
      <category term="JavaScript" scheme="www.foom.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Sublime折腾记</title>
    <link href="www.foom.site/2016/08/27/Sublime%E6%8A%98%E8%85%BE%E8%AE%B0/"/>
    <id>www.foom.site/2016/08/27/Sublime折腾记/</id>
    <published>2016-08-27T03:42:01.000Z</published>
    <updated>2017-04-24T09:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-why-Sublime"><a href="#1-why-Sublime" class="headerlink" title="1. why Sublime"></a>1. why Sublime</h2><p>针对一个后端是Java的前端空城师，那么这个年代我的编辑器/IDE选择有如下几个：</p>
<ul>
<li><a href="https://www.jetbrains.com/idea/" target="_blank" rel="external">IntelliJ IDEA</a></li>
<li><a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="external">WebStorm</a></li>
<li><a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a></li>
<li><a href="https://atom.io/" target="_blank" rel="external">Atom</a></li>
<li><a href="https://code.visualstudio.com" target="_blank" rel="external">Visual Studio Code</a></li>
</ul>
<p>OK，下面开始撕逼，每个群里和论坛里都有旷日持久的编辑器大战，框架大战。其实最终的结论都是一个，<strong>适合自己的才是最好的</strong>，所以我说说我现在选择编辑器的几个因素：</p>
<ul>
<li>尚未入职，电脑是Windows</li>
<li>后端是Java，使用Velocity模板引擎</li>
<li>前后端分离，且并行做项目，需要打开多个项目文件</li>
</ul>
<p>首先，以上5款编辑器都用了个遍，先说IDEA，好处是IDEA UL版支持Velocity语法，缺点是好多都是针对Java的工具和插件，很多功能并不会用到，总感觉这么大我却用不到对我很不友好；WebStorm，不支持Velocity语法高亮，毕竟是IDE很多很多高效的插件。然而Jet家的这两款IDE由于占内存太大，并且不能打开多个项目而最终否定掉，index的时候也极慢，虽然我的内存有16GB，处理器是I7；Atom，这些编辑器里我最喜欢的就是Atom，GitHub出品，UI风格，基于Node.js编写，强大的插件生态等等等，然而他在Win上是在是不给力啊，烂泥扶不上墙啊，老特么崩溃，老特么卡死，敲两个字就卡那儿半天，卸了装卸了装好多次了，虐我千百遍，最终还是要抛弃你，等Atom稳定了或者换到Mac上再用吧；vs code，微软出品，vs团队开发，也是基于node，相当于封装了一下atom，然而强大的开发团队在优化上比atom好太多，不能加载多个Project文件被瞬间枪毙，一些快捷键风格也不是很统一，延续了vs的风格，记了这么多快捷键好累。</p>
<p>其实一入坑前端的时候就是Sublime，还特地去慕课上学了Petter的《快乐的Sublime编辑器》，然而后来为了追求时尚，心态浮躁，各种编辑器尝试来装X，喏，最后还得回归本源，支持veolicity，多项目文件，丰富的插件，熟悉的快捷键，唯一担心的是怕他以后的更新幅度慢了，开发者都转去其他编辑器。</p>
<h2 id="2-let’s-Sublime"><a href="#2-let’s-Sublime" class="headerlink" title="2. let’s Sublime"></a>2. let’s Sublime</h2><h3 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h3><p>链接在这儿 <a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a></p>
<h3 id="2-2-破解"><a href="#2-2-破解" class="headerlink" title="2.2 破解"></a>2.2 破解</h3><p>禁忌话题，你懂得，如果没有注册的话保存五次就会弹出提示框，很烦，去网上搜Lisence，一堆一堆的</p>
<h3 id="2-3-Package-Control"><a href="#2-3-Package-Control" class="headerlink" title="2.3 Package Control"></a>2.3 Package Control</h3><p>如果要使用Sublime Text那么肯定要安装插件，如果要安装插件那么一定要安装<a href="https://packagecontrol.io/installation" target="_blank" rel="external">Package Control</a>，如果是ST3那么复制以下代码进控制台(<code>ctrl + ~</code>)，回车运行</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import urllib.request,os,hashlib; h = <span class="string">'df21e130d211cfc94d9b0905775a7c0f'</span> + <span class="string">'1e3d39e33b79698005270310898eea76'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="keyword">by</span> = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.<span class="built_in">replace</span>(<span class="string">' '</span>, <span class="string">'%20'</span>)).<span class="built_in">read</span>(); dh = hashlib.sha256(<span class="keyword">by</span>).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="built_in">open</span>(os.path.join( ipp, pf), <span class="string">'wb'</span> ).<span class="built_in">write</span>(<span class="keyword">by</span>)</div></pre></td></tr></table></figure>
<p>然后按<code>ctrl + shift + p</code>进入Package Control输入<code>install package</code>即可搜索并安装插件</p>
<h2 id="3-DIY"><a href="#3-DIY" class="headerlink" title="3. DIY"></a>3. DIY</h2><p>拿来一款编辑器，首先要调整成自己喜欢的姿态，包括一堆插件和配置项</p>
<h3 id="3-1-字体"><a href="#3-1-字体" class="headerlink" title="3.1 字体"></a>3.1 字体</h3><p>先改字体和字号，写程序就要用等宽字体，很多人推荐<code>Source Code Pro</code> 号称写程序专用，然而我喜欢<code>Consolas</code>更多一点，然后字号调整成14，有个什么说法忘记了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"font_face"</span>: <span class="string">"Consolas"</span>,</div><div class="line"><span class="string">"font_size"</span>: <span class="number">14</span>,</div></pre></td></tr></table></figure>
<h3 id="3-2-转换UTF8-ConvertToUTF8"><a href="#3-2-转换UTF8-ConvertToUTF8" class="headerlink" title="3.2 转换UTF8 - ConvertToUTF8"></a>3.2 转换UTF8 - ConvertToUTF8</h3><p>将某些中文会出现乱码的编码格式转换为UTF-8，安装插件<code>ConvertToUTF8</code></p>
<h3 id="3-3-显示空格-Bracket-Highlighter"><a href="#3-3-显示空格-Bracket-Highlighter" class="headerlink" title="3.3 显示空格 - Bracket Highlighter"></a>3.3 显示空格 - Bracket Highlighter</h3><p>有代码洁癖，我喜欢把所有空格显示出来，通过编辑器配置和安装高亮多余空格插件<code>Bracket Highlighter</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"draw_white_space"</span>: <span class="string">"all"</span>,</div></pre></td></tr></table></figure>
<p>将tab转换为4个空格</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">"tab_size":</span> <span class="number">4</span><span class="string">,</span></div><div class="line"><span class="attr">"translate_tabs_to_spaces":</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<h3 id="3-4-括号匹配-Trailing-Spaces"><a href="#3-4-括号匹配-Trailing-Spaces" class="headerlink" title="3.4 括号匹配 - Trailing Spaces"></a>3.4 括号匹配 - Trailing Spaces</h3><p>在选择前置括号时，自动匹配后置括号，安装插件<code>Trailing Spaces</code></p>
<h3 id="3-5-增强sidebar-SideBarEnhancements"><a href="#3-5-增强sidebar-SideBarEnhancements" class="headerlink" title="3.5 增强sidebar - SideBarEnhancements"></a>3.5 增强sidebar - SideBarEnhancements</h3><p>为了让Side Bar更牛逼，安装插件<code>SideBarEnhancements</code></p>
<h3 id="3-6-前端利器-Emmet"><a href="#3-6-前端利器-Emmet" class="headerlink" title="3.6 前端利器 - Emmet"></a>3.6 前端利器 - Emmet</h3><p>前端必备<code>Emmet</code></p>
<h3 id="3-7-Markdown预览-OmniMarkupPreviewer"><a href="#3-7-Markdown预览-OmniMarkupPreviewer" class="headerlink" title="3.7 Markdown预览 - OmniMarkupPreviewer"></a>3.7 Markdown预览 - OmniMarkupPreviewer</h3><p>预览Markdown<code>OmniMarkupPreviewer</code>，如果遇到404问题，参见stackoverflow上这篇<a href="http://stackoverflow.com/questions/35798823/omnimarkuppreviewer-404" target="_blank" rel="external">帖子</a>，需要在<code>Sublime Text &gt; Preferences &gt; Package Settings &gt; OmniMarkupPreviewer &gt; Settings - User</code>中加入如下代码：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"renderer_options-MarkdownRenderer"</span>: &#123;</div><div class="line">        <span class="attr">"extensions"</span>: [<span class="string">"tables"</span>, <span class="string">"fenced_code"</span>, <span class="string">"codehilite"</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用快捷键<code>ctrl+alt+o</code>预览</p>
<h3 id="3-8-颜色选择-Color-Picker"><a href="#3-8-颜色选择-Color-Picker" class="headerlink" title="3.8 颜色选择 - Color Picker"></a>3.8 颜色选择 - Color Picker</h3><p>写CSS写的多的时候要使用颜色拾色器方便开发<code>Color Picker</code>，使用快捷键<code>ctrl+shift+c</code>打开，若遇到快捷键不生效，那么有可能是因为安装了ConvertToUTF8有快捷键冲突了，打开<code>Sublime Text --&gt; Preferences --&gt; Browse Packages</code>，找到ConvertToUTF8文件夹并进入，找到对应操作系统的Default.sublime-keymap文件，直接删掉快捷键绑定</p>
<h2 id="4-My-Options"><a href="#4-My-Options" class="headerlink" title="4. My Options"></a>4. My Options</h2><p>Packages:</p>
<ul>
<li>Bracket Highlighter</li>
<li>ConvertToUTF8</li>
<li>Trailing Spaces</li>
<li>Emmet</li>
<li>Markdown Preview</li>
<li>SideBarEnhancement</li>
<li>HTML/CSS/JS Prettey</li>
</ul>
<p>Setting:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"draw_white_space"</span>: <span class="string">"all"</span>,</div><div class="line">    <span class="attr">"disable_pyv8_update"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"font_face"</span>: <span class="string">"Consolas"</span>,</div><div class="line">    <span class="attr">"font_size"</span>: <span class="number">14</span>,</div><div class="line">    <span class="attr">"ignored_packages"</span>:</div><div class="line">    [</div><div class="line">        <span class="string">"Vintage"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"tab_size"</span>: <span class="number">4</span>,</div><div class="line">    <span class="attr">"color_scheme"</span>: <span class="string">"Packages/Material Theme/schemes/Material-Theme-Darker.tmTheme"</span>,</div><div class="line">    <span class="attr">"theme"</span>: <span class="string">"Material-Theme-Darker.sublime-theme"</span>,</div><div class="line">    <span class="attr">"translate_tabs_to_spaces"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-why-Sublime&quot;&gt;&lt;a href=&quot;#1-why-Sublime&quot; class=&quot;headerlink&quot; title=&quot;1. why Sublime&quot;&gt;&lt;/a&gt;1. why Sublime&lt;/h2&gt;&lt;p&gt;针对一个后端是Java的前端空城师，那么这个年代
    
    </summary>
    
    
      <category term="tech" scheme="www.foom.site/tags/tech/"/>
    
      <category term="editor" scheme="www.foom.site/tags/editor/"/>
    
  </entry>
  
  <entry>
    <title>HTML中空白字符的奥义</title>
    <link href="www.foom.site/2016/08/10/HTML%E4%B8%AD%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6%E7%9A%84%E5%A5%A5%E4%B9%89/"/>
    <id>www.foom.site/2016/08/10/HTML中空白字符的奥义/</id>
    <published>2016-08-10T01:36:53.000Z</published>
    <updated>2017-04-24T09:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-导语"><a href="#1-导语" class="headerlink" title="1. 导语"></a>1. 导语</h2><p>在HTML中，会利用空格来作为文字排版的手段，一般使用半角空格（英文输入法下键盘直接输入的半角空格），<br>但不会使用连续的半角空格，因为这样在HTML中只会输出一个空白字符，此时会用HTML实体<code>&amp;nbsp;</code>来代替，<br>这样就会产生相应数量的空格，Unicode还定义了一些其他的空格，用来适应各种情况。</p>
<h2 id="2-Unicode中的实体"><a href="#2-Unicode中的实体" class="headerlink" title="2. Unicode中的实体"></a>2. Unicode中的实体</h2><table>
<thead>
<tr>
<th>Unicode</th>
<th>HTML Entity</th>
<th>Name</th>
</tr>
</thead>
<tbody>
<tr>
<td>U+00A0</td>
<td><code>&amp;nbsp;</code></td>
<td>不换行空格（No-Break Space）</td>
</tr>
<tr>
<td>U+2002</td>
<td><code>&amp;ensp;</code></td>
<td>En空格或（En Space）或Nut</td>
</tr>
<tr>
<td>U+2003</td>
<td><code>&amp;emsp;</code></td>
<td>Em空格或（Em Space）或Mutton</td>
</tr>
<tr>
<td>U+2009</td>
<td><code>&amp;thinsp;</code></td>
<td>窄空格（Thin Space）</td>
</tr>
<tr>
<td>U+200C</td>
<td><code>&amp;zwnj;</code></td>
<td>零宽不连字（Zero Width Non Joiner）</td>
</tr>
<tr>
<td>U+200D</td>
<td><code>&amp;zwj;</code></td>
<td>零宽连字（Zero Width Joniner）</td>
</tr>
</tbody>
</table>
<h3 id="2-1-不换行空格"><a href="#2-1-不换行空格" class="headerlink" title="2.1 不换行空格"></a>2.1 不换行空格</h3><p>不换行空格只有<code>&amp;nbsp;</code>一种，其不会被浏览器判断为可以在中间打断</p>
<h3 id="2-2-跟随字体大小产生相应空白的空格"><a href="#2-2-跟随字体大小产生相应空白的空格" class="headerlink" title="2.2 跟随字体大小产生相应空白的空格"></a>2.2 跟随字体大小产生相应空白的空格</h3><p>这类空格包含<code>&amp;ensp;</code> <code>&amp;emsp;</code> <code>&amp;thinsp;</code>三个空格字符，这三个空格都会根据不同的字体大小产生相应的空白大小，分别是1/2em, 1em, 1/6em</p>
<h3 id="2-3-零宽连字控制空格"><a href="#2-3-零宽连字控制空格" class="headerlink" title="2.3 零宽连字控制空格"></a>2.3 零宽连字控制空格</h3><p>包含<code>&amp;zwnj;</code>和<code>&amp;zwj;</code>，这两个空格不会产生空白，仅能控制字符之间是否连字，这两个字符也是“不打印字符”，即不会影响打印效果的字符，仅作字符特性控制。主要用于西方字体中。</p>
<h2 id="3-jsx中的空白字符"><a href="#3-jsx中的空白字符" class="headerlink" title="3. jsx中的空白字符"></a>3. jsx中的空白字符</h2><h2 id="4-关于字符编码的历史介绍"><a href="#4-关于字符编码的历史介绍" class="headerlink" title="4. 关于字符编码的历史介绍"></a>4. 关于字符编码的历史介绍</h2><p><code>ANSI（ASCII）</code> =&gt; <code>GB2312</code> =&gt; <code>GBK</code> =&gt; <code>DBCS</code> =&gt; <code>Unicode</code> =&gt; <code>UTF</code></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.zhihu.com/question/23374078" target="_blank" rel="external">Unicode 和 UTF-8 有何区别？ - 于洋的回答</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&amp;mid=2651222451&amp;idx=1&amp;sn=243e858964dbc3cf151e4efbbf175ddf&amp;scene=4#wechat_redirect" target="_blank" rel="external">【第667期】HTML 不同空格的特性与表现研究 - 前端早读课</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-导语&quot;&gt;&lt;a href=&quot;#1-导语&quot; class=&quot;headerlink&quot; title=&quot;1. 导语&quot;&gt;&lt;/a&gt;1. 导语&lt;/h2&gt;&lt;p&gt;在HTML中，会利用空格来作为文字排版的手段，一般使用半角空格（英文输入法下键盘直接输入的半角空格），&lt;br&gt;但不会使用
    
    </summary>
    
    
      <category term="tech" scheme="www.foom.site/tags/tech/"/>
    
      <category term="html" scheme="www.foom.site/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的变量声明提升问题 - Hoisting</title>
    <link href="www.foom.site/2016/08/09/JavaScript%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E9%97%AE%E9%A2%98-Hoisting/"/>
    <id>www.foom.site/2016/08/09/JavaScript中的变量声明问题-Hoisting/</id>
    <published>2016-08-09T09:23:11.000Z</published>
    <updated>2017-04-24T09:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-变量声明提升"><a href="#1-变量声明提升" class="headerlink" title="1. 变量声明提升"></a>1. 变量声明提升</h2><blockquote>
<p>hoisting  英[‘hɔɪstɪŋ]  美[‘hɔɪstɪŋ]<br>n.    起重，提升<br>v.    把…吊起，升起( hoist的现在分词 )</p>
</blockquote>
<p>先来看一个栗子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cc = <span class="string">'hello'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(cc);</div><div class="line">    <span class="keyword">var</span> cc = <span class="string">'world'</span>;</div><div class="line">    <span class="built_in">console</span>.log(cc);</div><div class="line">&#125;</div><div class="line">foo();</div><div class="line"><span class="built_in">console</span>.log(cc);</div></pre></td></tr></table></figure></p>
<p>这里将会输出 undefined、’world’、’hello’<br>此处主要有两个知识点：</p>
<ul>
<li>作用域</li>
<li>变量声明提升</li>
</ul>
<p>JavaScript是一门解释性语言，当代码在解释器（如Chrome的V8引擎）环境中执行时，会有一个预解析的过程，此时会将变量声明和函数声明提升至当前作用域的最前方，这个行为被称为声明提升（Hoisting）</p>
<p>再来看上面的例子，此代码有两层作用域，全局作用域和函数foo作用域，而foo中的变量声明在预解析的过程中会被提升至函数作用域的前方，于是代码就会变成这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cc = <span class="string">'hello'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> cc;</div><div class="line">    <span class="built_in">console</span>.log(cc);</div><div class="line">    cc = <span class="string">'world'</span>;</div><div class="line">    <span class="built_in">console</span>.log(cc);</div><div class="line">&#125;</div><div class="line">foo();</div><div class="line"><span class="built_in">console</span>.log(cc);</div></pre></td></tr></table></figure></p>
<p>当执行到第一个log时，变量cc只是进行了声明，并未赋值，所以打印出的是<code>undefined</code></p>
<h2 id="2-函数声明提升"><a href="#2-函数声明提升" class="headerlink" title="2. 函数声明提升"></a>2. 函数声明提升</h2><p>函数的声明有两种方式：函数声明和函数表达式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数声明</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 函数表达式</span></div><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>解析器在向执行环境中加载数据时，对函数声明和函数表达式并非一视同仁。解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以访问）；至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解释执行。</p>
</blockquote>
<p>当然，也可以函数声明和函数表达式同时使用,如<code>var a = function b(){}</code>,其结果是只具有函数表达式的作用，b会被自动忽略，所以只会发生变量提升效果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-变量声明提升&quot;&gt;&lt;a href=&quot;#1-变量声明提升&quot; class=&quot;headerlink&quot; title=&quot;1. 变量声明提升&quot;&gt;&lt;/a&gt;1. 变量声明提升&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;hoisting  英[‘hɔɪstɪŋ]  美[‘hɔɪst
    
    </summary>
    
    
      <category term="tech" scheme="www.foom.site/tags/tech/"/>
    
      <category term="JavaScript" scheme="www.foom.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的数据类型及其检测</title>
    <link href="www.foom.site/2016/08/09/JavaScript%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E6%A3%80%E6%B5%8B/"/>
    <id>www.foom.site/2016/08/09/JavaScript中的数据类型及其检测/</id>
    <published>2016-08-09T09:12:26.000Z</published>
    <updated>2017-04-24T09:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h2><h3 id="1-1-基本类型"><a href="#1-1-基本类型" class="headerlink" title="1.1 基本类型"></a>1.1 基本类型</h3><ul>
<li>Number</li>
<li>String</li>
<li>Boolean</li>
<li>Null</li>
<li>Undefined</li>
<li>Symbol</li>
</ul>
<h3 id="1-2-引用类型"><a href="#1-2-引用类型" class="headerlink" title="1.2 引用类型"></a>1.2 引用类型</h3><ul>
<li>Object</li>
<li>Array</li>
<li>Function</li>
<li>RegExp</li>
<li>Date</li>
</ul>
<h2 id="2-类型检测"><a href="#2-类型检测" class="headerlink" title="2. 类型检测"></a>2. 类型检测</h2><h3 id="2-1-typeof"><a href="#2-1-typeof" class="headerlink" title="2.1 typeof"></a>2.1 typeof</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'Nicholas'</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> i = <span class="number">22</span>;</div><div class="line"><span class="keyword">var</span> u;</div><div class="line"><span class="keyword">var</span> n = <span class="literal">null</span>;</div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="built_in">Function</span>();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.info(<span class="keyword">typeof</span> s);     <span class="comment">// string</span></div><div class="line"><span class="built_in">console</span>.info(<span class="keyword">typeof</span> b);     <span class="comment">// boolean</span></div><div class="line"><span class="built_in">console</span>.info(<span class="keyword">typeof</span> i);     <span class="comment">// number</span></div><div class="line"><span class="built_in">console</span>.info(<span class="keyword">typeof</span> u);     <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.info(<span class="keyword">typeof</span> n);     <span class="comment">// object</span></div><div class="line"><span class="built_in">console</span>.info(<span class="keyword">typeof</span> o);     <span class="comment">// object</span></div><div class="line"><span class="built_in">console</span>.info(<span class="keyword">typeof</span> f);     <span class="comment">// function</span></div></pre></td></tr></table></figure>
<p><strong><code>typeof</code>只能检测基本数据类型，对于<code>null</code>还有一个Bug</strong></p>
<h3 id="2-2-instanceof"><a href="#2-2-instanceof" class="headerlink" title="2.2 instanceof"></a>2.2 instanceof</h3><p><code>result = variable instanceof constructor</code><br><code>instanceof</code>用于检测某个对象的原型链是否包含某个构造函数的<code>prototype</code>属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">D</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> C();</div><div class="line">o <span class="keyword">instanceof</span> C     <span class="comment">// true, Object.getPrototypeOf(o) === C.prototype</span></div><div class="line">o <span class="keyword">instanceof</span> D     <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Cat.prototype = <span class="keyword">new</span> Animal();</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Cat();</div><div class="line">b <span class="keyword">instanceof</span> Animal     <span class="comment">// true</span></div><div class="line"></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">instanceof</span> <span class="built_in">Array</span>      <span class="comment">// true</span></div><div class="line">/abc/ <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>     <span class="comment">// true</span></div><div class="line">(&#123;&#125;) <span class="keyword">instanceof</span> <span class="built_in">Object</span>      <span class="comment">// true</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;) <span class="keyword">instanceof</span> <span class="built_in">Function</span>     <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p><strong><code>instanceof</code>适用于检测对象，它是基于原型链运作的</strong></p>
<h3 id="2-3-constructor"><a href="#2-3-constructor" class="headerlink" title="2.3 constructor"></a>2.3 constructor</h3><p><code>constructor</code>属性返回一个指向创建了该对象原型的函数引用，该属性的值是哪个函数本身。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">BadCat</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Cat.prototype = <span class="keyword">new</span> Animal();</div><div class="line">BadCat.prototype = <span class="keyword">new</span> Cat();</div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Animal();</div><div class="line">a.constructor === Animal    <span class="comment">// true</span></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> BadCat();</div><div class="line">b.constructor === Animal    <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p><strong><code>constructor</code>指向的是最初创建者，而且易于伪造，不适合做类型判断</strong></p>
<h3 id="2-4-toString"><a href="#2-4-toString" class="headerlink" title="2.4 toString"></a>2.4 toString</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.toString.call();</div><div class="line">(&#123;&#125;).toString.call();</div><div class="line"><span class="built_in">window</span>.toString.call();</div><div class="line">toString.call();</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.toString.call([]);     <span class="comment">// [object Array]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;);     <span class="comment">// [object Object]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">''</span>);     <span class="comment">// [object String]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>());     <span class="comment">// [object Date]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>);      <span class="comment">// [object Number]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);     <span class="comment">// [object Function]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/test/i</span>);    <span class="comment">// [object RegExp]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>);       <span class="comment">// [object Boolean]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>);       <span class="comment">// [object Null]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call();       <span class="comment">// [object Undefined]</span></div></pre></td></tr></table></figure>
<ul>
<li>[ ] 原理</li>
</ul>
<p><strong>几乎十全十美，只是不能检测用户自定义类型</strong></p>
<h3 id="2-5-小结"><a href="#2-5-小结" class="headerlink" title="2.5 小结"></a>2.5 小结</h3><ul>
<li><code>typeof</code>只能检测基本数据类型，对于<code>null</code>还有Bug</li>
<li><code>instanceof</code>适用于检测对象，它是基于原型链运作的</li>
<li><code>constructor</code>指向的是最初创建者，而且容易伪造，不适合做类型判断</li>
<li><code>toString</code>适用于ECMA内置JavaScript类型（包括基本数据类型和内置对象）的类型判断</li>
<li>基于引用判等的类型检查都有跨窗口问题，比如<code>instanceof</code>和<code>constructor</code></li>
</ul>
<p><strong>如果你要判断的是基本数据类型或JavaScript内置对象，使用<code>toString</code>；如果要判断的是自定义类型，请使用<code>instanceof</code></strong></p>
<h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MjM5NzE0MjQ2Mw==&amp;mid=2652491694&amp;idx=1&amp;sn=9d3257c6bac07f911a0a71e2b8167845&amp;scene=4#wechat_redirect" target="_blank" rel="external">w3cPlus - JavaScrit的变量：如何检测变量类型</a></li>
<li><a href="https://book.douban.com/subject/10546125/" target="_blank" rel="external">JavaScript高级程序设计（第3版）</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-数据类型&quot;&gt;&lt;a href=&quot;#1-数据类型&quot; class=&quot;headerlink&quot; title=&quot;1. 数据类型&quot;&gt;&lt;/a&gt;1. 数据类型&lt;/h2&gt;&lt;h3 id=&quot;1-1-基本类型&quot;&gt;&lt;a href=&quot;#1-1-基本类型&quot; class=&quot;headerlink
    
    </summary>
    
    
      <category term="tech" scheme="www.foom.site/tags/tech/"/>
    
      <category term="JavaScript" scheme="www.foom.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>序</title>
    <link href="www.foom.site/2016/02/19/%E5%BA%8F/"/>
    <id>www.foom.site/2016/02/19/序/</id>
    <published>2016-02-19T15:16:08.000Z</published>
    <updated>2017-04-24T09:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一次徒手搭博客，之前在QQ空间，百度空间，CSDN，博客园，SF，GitHub issues等地方均有尝试过，没有坚持下来，这次在这里重新开启，请多支持。</p>
<p>本博客借用GitHub Pages作为服务器，Hexo作为静态博客发布工具，买的万网的域名解析，全部开源免费，用到的技术和插件如下：</p>
<ul>
<li>GitHub Pages</li>
<li>Git</li>
<li>NodeJS</li>
<li>Hexo</li>
<li>不蒜子</li>
<li>多说</li>
<li>theme: NexT</li>
</ul>
<p>利用其开放的静态资源接口，用静态CDN公共库做了替换，主要来自以下网站</p>
<ul>
<li>百度CDN - <a href="http://cdn.code.baidu.com/" target="_blank" rel="external">http://cdn.code.baidu.com/</a></li>
<li>七牛CDN - <a href="http://staticfile.org/" target="_blank" rel="external">http://staticfile.org/</a><br>其中font-awesome不要使用百度的，后端没有开启CROS，导致加载页面时会有跨域问题</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次徒手搭博客，之前在QQ空间，百度空间，CSDN，博客园，SF，GitHub issues等地方均有尝试过，没有坚持下来，这次在这里重新开启，请多支持。&lt;/p&gt;
&lt;p&gt;本博客借用GitHub Pages作为服务器，Hexo作为静态博客发布工具，买的万网的域名解析，全部开
    
    </summary>
    
    
      <category term="life" scheme="www.foom.site/tags/life/"/>
    
  </entry>
  
</feed>
